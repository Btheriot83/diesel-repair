---
import { COMPANY_CONFIG } from "@/config/constants";
import heroManifest from "@/data/heroManifest.json";

export interface Props {
  city: string;
  headline: string;
  subline: string;
  breadcrumbs?: Array<{
    "@type": string;
    position: number;
    name: string;
    item?: string;
  }>;
}

const { city, headline, subline, breadcrumbs } = Astro.props;

// Resolve hero from manifest
const citySlug = city.toLowerCase();
const heroData = heroManifest[citySlug] || heroManifest['default-hero'];

if (!heroData) {
  throw new Error(`No hero image found for city: ${city}`);
}

// Generate responsive image sources for optimized images
const isOptimizedHero = heroData.path.includes('/hero-optimized/') || heroData.path.includes('/phoenix-optimized/');
let avifSources = '';
let webpSources = '';

if (isOptimizedHero) {
  const basePath = heroData.path.replace(/\.[^.]+$/, ''); // Remove extension
  const baseDir = basePath.split('/').slice(0, -1).join('/'); // Get directory

  // Extract filename prefix (e.g., "hero-" from "hero-1600w.avif" or "phoenix-" from "phoenix-1600w.avif")
  const fileName = heroData.fileName.replace(/\.[^.]+$/, ''); // Remove extension
  const filePrefix = fileName.replace(/-\d+w$/, ''); // Remove size suffix (e.g., "-1600w")

  // Build responsive srcset for different formats using dynamic prefix
  avifSources = [
    `${baseDir}/${filePrefix}-2000w.avif 2000w`,
    `${baseDir}/${filePrefix}-1600w.avif 1600w`,
    `${baseDir}/${filePrefix}-1200w.avif 1200w`
  ].join(', ');

  webpSources = [
    `${baseDir}/${filePrefix}-2000w.webp 2000w`,
    `${baseDir}/${filePrefix}-1600w.webp 1600w`,
    `${baseDir}/${filePrefix}-1200w.webp 1200w`
  ].join(', ');
}

// Fallback image (use the selected hero)
const fallbackSrc = heroData.path;

// Alt text with city context
const altText = `${city} mobile diesel mechanic on I-10 at sunset`;
---

<section class="section-hero bg-gray-900 text-white">
  <!-- Responsive Hero Image -->
  <picture>
    <source
      srcset={avifSources}
      type="image/avif"
      sizes="(max-width: 768px) 100vw, 1200px"
    />
    <source
      srcset={webpSources}
      type="image/webp"
      sizes="(max-width: 768px) 100vw, 1200px"
    />
    <img
      src={fallbackSrc}
      alt={altText}
      width={heroData.width}
      height={heroData.height}
      decoding="async"
      fetchpriority="high"
      class="absolute inset-0 w-full h-full object-cover"
      sizes="(max-width: 768px) 100vw, 1200px"
    />
  </picture>

  <!-- Gradient Overlay for Text Contrast -->
  <div class="hero-overlay"></div>

  <!-- Hero Content -->
  <div class="relative z-10 container mx-auto container-padding section-padding">
    <div class="max-w-4xl mx-auto text-center">
      <!-- Single H1 -->
      <h1 class="heading-xl text-white drop-shadow-lg mb-6">
        {headline}
      </h1>

      <!-- Subline -->
      <p class="text-lead text-white/90 drop-shadow max-w-3xl mx-auto mb-8">
        {subline}
      </p>

      <!-- Dual CTAs -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <!-- Primary CTA - Phone -->
        <a
          href={COMPANY_CONFIG.phoneLink}
          class="btn-hero text-lg"
          aria-label={`Call ${COMPANY_CONFIG.phoneNumber} for immediate diesel repair service`}
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path d="M6.62,10.79C8.06,13.62 10.38,15.94 13.21,17.38L15.41,15.18C15.69,14.9 16.08,14.82 16.43,14.93C17.55,15.3 18.75,15.5 20,15.5A1,1 0 0,1 21,16.5V20A1,1 0 0,1 20,21A17,17 0 0,1 3,4A1,1 0 0,1 4,3H7.5A1,1 0 0,1 8.5,4C8.5,5.25 8.7,6.45 9.07,7.57C9.18,7.92 9.1,8.31 8.82,8.59L6.62,10.79Z"/>
          </svg>
          Call {COMPANY_CONFIG.phoneNumber}
        </a>

        <!-- Secondary CTA - Request Service -->
        <a
          href="#request-service"
          class="btn-outline text-lg"
          aria-label="Scroll to request service form"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Request Service
        </a>
      </div>
    </div>
  </div>
</section>

<!-- Breadcrumb Row -->
{breadcrumbs && breadcrumbs.length > 0 && (
  <nav class="bg-gray-50 border-b border-gray-200 py-3" aria-label="Breadcrumb">
    <div class="container mx-auto px-4">
      <ol class="flex flex-wrap items-center gap-2 text-sm">
        {breadcrumbs.map((crumb, index) => (
          <li class="flex items-center">
            {index > 0 && (
              <svg class="w-4 h-4 text-gray-400 mx-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                <path d="M9 5l7 7-7 7"></path>
              </svg>
            )}
            {crumb.item ? (
              <a
                href={crumb.item}
                class="text-diesel-orange hover:text-diesel-hover font-medium transition-colors"
                aria-current={index === breadcrumbs.length - 1 ? "page" : undefined}
              >
                {crumb.name}
              </a>
            ) : (
              <span class="text-gray-900 font-medium" aria-current="page">
                {crumb.name}
              </span>
            )}
          </li>
        ))}
      </ol>
    </div>
  </nav>
)}

<style>
  /* Ensure text is readable over any hero image */
  h1 {
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.6), 0 2px 4px rgba(0, 0, 0, 0.4);
  }

  p {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  /* Focus styles for accessibility */
  a:focus-visible {
    transform: translateY(-2px);
  }

  /* Hover effects */
  a:hover {
    transform: translateY(-1px);
  }
</style>